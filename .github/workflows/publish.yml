name: Create new patch release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, 'bump version') || (github.event_name  == 'workflow_dispatch') "

    permissions:
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing
      pull-requests: write
      contents: write
      repository-projects: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9 # Adjust to your Python version
      # - name: current_version
      #   run: echo "current_version=$(python -c 'from wrapconfig import __version__; print(__version__)')" >> $GITHUB_ENV
      - name: Show GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
        shell: bash

      - name: Set up Git user name and email
        run: |
          if [[ "${{ github.event_name }}" == 'push' ]]; then
            git config --global user.name "${{ github.event.pusher.name }}"
            git config --global user.email "${{ github.event.pusher.email }}"
          fi
      #      else
      #        git config --global user.name "Your Default Name"
      #        git config --global user.email "youremail@example.com"
      #     fi

      - name: setup bump
        run: |
          pip install bump2version wheel setuptools twine

      - name: Increment version
        run: |
          bump2version --no-commit patch # or 'minor' or 'major'

      - name: current_version
        run: echo "current_version=$(python -c 'from wrapconfig import __version__; print(__version__)')" >> $GITHUB_ENV

      - name: Build and upload to PyPI
        run: |
          python setup.py sdist bdist_wheel

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - uses: stefanzweifel/git-auto-commit-action@v5

      - name: Create GitHub tag
        run: |
          git tag v$(python -c "from wrapconfig import __version__; print(__version__)")
          git push --tags
